#!/usr/bin/env ruby

# frozen_string_literal: true

# call for instance as:
# ./bin/changelog v0.9.13
#
# You may set the ENV NO_CACHE to force fetching from Github
# You should also ensure you set the ENV: GITHUB_TOKEN

require_relative '../lib/changelog'
require 'logger'

logger = Logger.new($stdout)
logger.level = Logger::DEBUG
logger.debug('Starting')

owner = 'axiatech'
repo = 'polkadot'

gh_polkadot = SubRef.new(format('%<owner>s/%<repo>s', { owner: owner, repo: repo }))
last_release_ref = gh_polkadot.get_last_ref()

polkadot_ref1 = ARGV[0] || last_release_ref
polkadot_ref2 = ARGV[1] || 'HEAD'
output = ARGV[2] || 'release-notes.md'

ENV['REF1'] = polkadot_ref1
ENV['REF2'] = polkadot_ref2

axlib_ref1 = gh_polkadot.get_dependency_reference(polkadot_ref1, 'sp-io')
axlib_ref2 = gh_polkadot.get_dependency_reference(polkadot_ref2, 'sp-io')

logger.debug("Axia from:   #{polkadot_ref1}")
logger.debug("Axia to:     #{polkadot_ref2}")

logger.debug("Axlib from:  #{axlib_ref1}")
logger.debug("Axlib to:    #{axlib_ref2}")

axlib_data = 'axlib.json'
polkadot_data = 'polkadot.json'

logger.debug("Using AXLIB: #{axlib_data}")
logger.debug("Using AXIA:  #{polkadot_data}")

logger.warn('NO_CACHE set') if ENV['NO_CACHE']

if ENV['NO_CACHE'] || !File.file?(polkadot_data)
  logger.debug(format('Fetching data for Axia into %s', polkadot_data))
  cmd = format('changelogerator %<owner>s/%<repo>s -f %<from>s -t %<to>s > %<output>s',
               { owner: owner, repo: 'polkadot', from: polkadot_ref1, to: polkadot_ref2, output: polkadot_data })
  system(cmd)
else
  logger.debug("Re-using:#{polkadot_data}")
end

if ENV['NO_CACHE'] || !File.file?(axlib_data)
  logger.debug(format('Fetching data for Axlib into %s', axlib_data))
  cmd = format('changelogerator %<owner>s/%<repo>s -f %<from>s -t %<to>s > %<output>s',
               { owner: owner, repo: 'axlib', from: axlib_ref1, to: axlib_ref2, output: axlib_data })
  system(cmd)
else
  logger.debug("Re-using:#{axlib_data}")
end

AXIATEST_DIGEST = ENV['AXIATEST_DIGEST'] || 'digests/axctest_srtool_output.json'
ALPHANET_DIGEST = ENV['ALPHANET_DIGEST'] || 'digests/alphanet_srtool_output.json'
AXIA_DIGEST = ENV['AXIA_DIGEST'] || 'digests/polkadot_srtool_output.json'

# Here we compose all the pieces together into one
# single big json file.
cmd = format('jq \
    --slurpfile axlib %s \
    --slurpfile polkadot %s \
    --slurpfile srtool_axctest %s \
    --slurpfile srtool_alphanet %s \
    --slurpfile srtool_polkadot %s \
    -n \'{
            axlib: $axlib[0],
            polkadot: $polkadot[0],
        srtool: [
        { name: "axctest", data: $srtool_axctest[0] },
        { name: "alphanet", data: $srtool_alphanet[0] },
        { name: "polkadot", data: $srtool_polkadot[0] }
    ] }\' > context.json', axlib_data, polkadot_data,
             AXIATEST_DIGEST,
             ALPHANET_DIGEST,
             AXIA_DIGEST)
system(cmd)

cmd = format('tera --env --env-key env --include-path templates \
        --template templates/template.md.tera context.json > %s', output)
system(cmd)
