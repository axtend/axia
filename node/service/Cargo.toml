[package]
name = "axia-service"
version = "0.9.17"
authors = ["Axia Technologies <admin@axia.io>"]
edition = "2018"

[dependencies]
# Substrate Client
sc-authority-discovery = { git = "https://github.com/axtend/axlib", branch = "axlib" }
babe = { package = "sc-consensus-babe", git = "https://github.com/axtend/axlib", branch = "axlib" }
beefy-primitives = { git = "https://github.com/axtend/axlib", branch = "axlib" }
beefy-gadget = { git = "https://github.com/axtend/axlib", branch = "axlib" }
grandpa = { package = "sc-finality-grandpa", git = "https://github.com/axtend/axlib", branch = "axlib" }
sc-block-builder = { git = "https://github.com/axtend/axlib", branch = "axlib" }
sc-chain-spec = { git = "https://github.com/axtend/axlib", branch = "axlib" }
sc-client-api = { git = "https://github.com/axtend/axlib", branch = "axlib" }
sc-client-db = { git = "https://github.com/axtend/axlib", branch = "axlib" }
sc-consensus-uncles = { git = "https://github.com/axtend/axlib", branch = "axlib" }
sc-consensus = { git = "https://github.com/axtend/axlib", branch = "axlib" }
sc-consensus-slots = { git = "https://github.com/axtend/axlib", branch = "axlib" }
sc-executor = { git = "https://github.com/axtend/axlib", branch = "axlib" }
sc-network = { git = "https://github.com/axtend/axlib", branch = "axlib" }
sc-transaction-pool = { git = "https://github.com/axtend/axlib", branch = "axlib" }
sc-sync-state-rpc = { git = "https://github.com/axtend/axlib", branch = "axlib" }
sc-keystore = { git = "https://github.com/axtend/axlib", branch = "axlib" }
sc-basic-authorship = { git = "https://github.com/axtend/axlib", branch = "axlib" }
sc-offchain = { git = "https://github.com/axtend/axlib", branch = "axlib" }
service = { package = "sc-service", git = "https://github.com/axtend/axlib", default-features = false , branch = "axlib" }
telemetry = { package = "sc-telemetry", git = "https://github.com/axtend/axlib", branch = "axlib" }

# Substrate Primitives
sp-authority-discovery = { git = "https://github.com/axtend/axlib", branch = "axlib" }
consensus_common = { package = "sp-consensus", git = "https://github.com/axtend/axlib", branch = "axlib" }
grandpa_primitives = { package = "sp-finality-grandpa", git = "https://github.com/axtend/axlib", branch = "axlib" }
inherents = { package = "sp-inherents", git = "https://github.com/axtend/axlib", branch = "axlib" }
sp-api = { git = "https://github.com/axtend/axlib", branch = "axlib" }
sp-block-builder = { git = "https://github.com/axtend/axlib", branch = "axlib" }
sp-blockchain = { git = "https://github.com/axtend/axlib", branch = "axlib" }
sp-core = { git = "https://github.com/axtend/axlib", branch = "axlib" }
sp-io = { git = "https://github.com/axtend/axlib", branch = "axlib" }
sp-keystore = { git = "https://github.com/axtend/axlib", branch = "axlib" }
sp-offchain = { package = "sp-offchain", git = "https://github.com/axtend/axlib", branch = "axlib" }
sp-runtime = { git = "https://github.com/axtend/axlib", branch = "axlib" }
sp-session = { git = "https://github.com/axtend/axlib", branch = "axlib" }
sp-storage = { git = "https://github.com/axtend/axlib", branch = "axlib" }
sp-transaction-pool = { git = "https://github.com/axtend/axlib", branch = "axlib" }
sp-trie = { git = "https://github.com/axtend/axlib", branch = "axlib" }
sp-timestamp = { git = "https://github.com/axtend/axlib", branch = "axlib" }
sp-consensus-babe = { git = "https://github.com/axtend/axlib", branch = "axlib" }
sp-state-machine = { git = "https://github.com/axtend/axlib", branch = "axlib" }

# Substrate Pallets
pallet-babe = { git = "https://github.com/axtend/axlib", branch = "axlib" }
pallet-im-online = { git = "https://github.com/axtend/axlib", branch = "axlib" }
pallet-staking = { git = "https://github.com/axtend/axlib", branch = "axlib" }
pallet-transaction-payment-rpc-runtime-api = { git = "https://github.com/axtend/axlib", branch = "axlib" }
pallet-mmr-primitives = { git = "https://github.com/axtend/axlib", branch = "axlib" }

# Substrate Other
frame-system-rpc-runtime-api = { git = "https://github.com/axtend/axlib", branch = "axlib" }
prometheus-endpoint = { package = "substrate-prometheus-endpoint", git = "https://github.com/axtend/axlib", branch = "axlib" }

# External Crates
futures = "0.3.21"
hex-literal = "0.3.4"
tracing = "0.1.29"
serde = { version = "1.0.136", features = ["derive"] }
thiserror = "1.0.30"
kvdb = "0.10.0"
kvdb-rocksdb = { version = "0.14.0", optional = true }
async-trait = "0.1.52"
lru = "0.7"

# Axia
axia-node-core-allychains-inherent = { path = "../core/allychains-inherent" }
axia-overseer = { path = "../overseer" }
axia-client = { path = "../client", default-features = false, optional = true }
axia-allychain = { path = "../../allychain" }
axia-primitives = { path = "../../primitives" }
axia-node-primitives = { path = "../primitives" }
axia-rpc = { path = "../../rpc" }
axia-subsystem = { package = "axia-node-subsystem", path = "../subsystem" }
axia-node-subsystem-util = { path = "../subsystem-util" }
axia-runtime-allychains = { path = "../../runtime/allychains" }
axia-node-network-protocol = { path = "../network/protocol" }

# Axia Runtime Constants
axia-runtime-constants = { path = "../../runtime/axia/constants", optional = true }
axctest-runtime-constants = { path = "../../runtime/axctest/constants", optional = true }
betanet-runtime-constants = { path = "../../runtime/betanet/constants", optional = true }
alphanet-runtime-constants = { path = "../../runtime/alphanet/constants", optional = true }

# Axia Runtimes
axia-runtime = { path = "../../runtime/axia", optional = true }
axctest-runtime = { path = "../../runtime/axctest", optional = true }
alphanet-runtime = { path = "../../runtime/alphanet", optional = true }
betanet-runtime = { path = "../../runtime/betanet", optional = true }

# Axia Subsystems
axia-approval-distribution = { path = "../network/approval-distribution", optional = true }
axia-availability-bitfield-distribution = { path = "../network/bitfield-distribution", optional = true }
axia-availability-distribution = { path = "../network/availability-distribution", optional = true }
axia-availability-recovery = { path = "../network/availability-recovery", optional = true }
axia-collator-protocol = { path = "../network/collator-protocol", optional = true }
axia-dispute-distribution = { path = "../network/dispute-distribution", optional = true }
axia-gossip-support = { path = "../network/gossip-support", optional = true }
axia-network-bridge = { path = "../network/bridge", optional = true }
axia-node-collation-generation = { path = "../collation-generation", optional = true }
axia-node-core-approval-voting = { path = "../core/approval-voting", optional = true }
axia-node-core-av-store = { path = "../core/av-store", optional = true }
axia-node-core-backing = { path = "../core/backing", optional = true }
axia-node-core-bitfield-signing = { path = "../core/bitfield-signing", optional = true }
axia-node-core-candidate-validation = { path = "../core/candidate-validation", optional = true }
axia-node-core-chain-api = { path = "../core/chain-api", optional = true }
axia-node-core-chain-selection = { path = "../core/chain-selection", optional = true }
axia-node-core-dispute-coordinator = { path = "../core/dispute-coordinator", optional = true }
axia-node-core-provisioner = { path = "../core/provisioner", optional = true }
axia-node-core-pvf-checker = { path = "../core/pvf-checker", optional = true }
axia-node-core-runtime-api = { path = "../core/runtime-api", optional = true }
axia-statement-distribution = { path = "../network/statement-distribution", optional = true }

[dev-dependencies]
axia-test-client = { path = "../test/client" }
axia-node-subsystem-test-helpers = { path = "../subsystem-test-helpers" }
env_logger = "0.9.0"
log = "0.4.14"
assert_matches = "1.5.0"

[features]
default = ["db", "full-node", "axia-native"]

db = [
	"service/db"
]

full-node = [
	"axia-node-core-av-store",
	"axia-node-core-approval-voting",
	"axia-availability-bitfield-distribution",
	"axia-availability-distribution",
	"axia-availability-recovery",
	"axia-client",
	"axia-collator-protocol",
	"axia-dispute-distribution",
	"axia-gossip-support",
	"axia-network-bridge",
	"axia-node-collation-generation",
	"axia-node-core-backing",
	"axia-node-core-bitfield-signing",
	"axia-node-core-candidate-validation",
	"axia-node-core-chain-api",
	"axia-node-core-chain-selection",
	"axia-node-core-dispute-coordinator",
	"axia-node-core-provisioner",
	"axia-node-core-runtime-api",
	"axia-statement-distribution",
	"axia-approval-distribution",
	"axia-node-core-pvf-checker",
	"kvdb-rocksdb"
]

# Configure the native runtimes to use. Axia is enabled by default.
#
# Validators require the native runtime currently
axia-native = [ "axia-runtime", "axia-runtime-constants", "axia-client/axia" ]
axctest-native = [ "axctest-runtime", "axctest-runtime-constants", "axia-client/axctest" ]
alphanet-native = [ "alphanet-runtime", "alphanet-runtime-constants", "axia-client/alphanet" ]
betanet-native = [ "betanet-runtime", "betanet-runtime-constants", "axia-client/betanet" ]

runtime-benchmarks = [
	"axia-runtime/runtime-benchmarks",
	"axctest-runtime/runtime-benchmarks",
	"alphanet-runtime/runtime-benchmarks",
	"betanet-runtime/runtime-benchmarks"
]
try-runtime = [
	"axia-runtime/try-runtime",
	"axctest-runtime/try-runtime",
	"alphanet-runtime/try-runtime",
	"betanet-runtime/try-runtime",
]
fast-runtime = [
	"axia-runtime/fast-runtime",
	"axctest-runtime/fast-runtime",
	"alphanet-runtime/fast-runtime",
	"betanet-runtime/fast-runtime",
]

malus = ["full-node"]
runtime-metrics = [
	"axia-client/runtime-metrics",
	"betanet-runtime/runtime-metrics",
	"alphanet-runtime/runtime-metrics",
	"axctest-runtime/runtime-metrics",
	"axia-runtime/runtime-metrics",
	"axia-runtime-allychains/runtime-metrics"
]
